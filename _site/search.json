[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Hakkında",
    "section": "",
    "text": "Merhaba! Ben [İbrahim], veri bilimi, istatistik ve R programlama dili ile ilgileniyorum. Bu siteyi, projelerimi, analizlerimi ve öğrendiklerimi paylaşmak için oluşturdum.\n\n\n\nEğitim: [Karabük] Üniversitesi, [iktisat]\nDeneyim: Veri analizi, görselleştirme, makine öğrenmesi projeleri ve çeşitli analiz çalışmaları\n\n\n\n\nBu sitede şunları bulabilirsiniz: - Veri Analizleri: Farklı veri setleriyle yaptığım analizleri ve elde ettiğim sonuçları paylaşıyorum. - Proje Çalışmaları: Veri bilimi ve makine öğrenmesi üzerine yaptığım projelere buradan ulaşabilirsiniz. - Blog Yazıları: Veri bilimi, R dili ve Quarto hakkında yazılar paylaşıyorum.\n\n\n\nBana ulaşmak isterseniz aşağıdaki kanallardan iletişime geçebilirsiniz:\n\nE-posta: example@example.com\nLinkedIn: LinkedIn Profilin\nGitHub: GitHub Hesabın"
  },
  {
    "objectID": "projects.html#eğitim-ve-deneyim",
    "href": "projects.html#eğitim-ve-deneyim",
    "title": "Hakkında",
    "section": "",
    "text": "Eğitim: [Karabük] Üniversitesi, [iktisat]\nDeneyim: Veri analizi, görselleştirme, makine öğrenmesi projeleri ve çeşitli analiz çalışmaları"
  },
  {
    "objectID": "projects.html#bu-site-hakkında",
    "href": "projects.html#bu-site-hakkında",
    "title": "Hakkında",
    "section": "",
    "text": "Bu sitede şunları bulabilirsiniz: - Veri Analizleri: Farklı veri setleriyle yaptığım analizleri ve elde ettiğim sonuçları paylaşıyorum. - Proje Çalışmaları: Veri bilimi ve makine öğrenmesi üzerine yaptığım projelere buradan ulaşabilirsiniz. - Blog Yazıları: Veri bilimi, R dili ve Quarto hakkında yazılar paylaşıyorum."
  },
  {
    "objectID": "projects.html#iletişim",
    "href": "projects.html#iletişim",
    "title": "Hakkında",
    "section": "",
    "text": "Bana ulaşmak isterseniz aşağıdaki kanallardan iletişime geçebilirsiniz:\n\nE-posta: example@example.com\nLinkedIn: LinkedIn Profilin\nGitHub: GitHub Hesabın"
  },
  {
    "objectID": "odev1.html",
    "href": "odev1.html",
    "title": "Ödev 1: Uzay Gemisi Titanik",
    "section": "",
    "text": "Uzay Gemisi Titanic Projesi\nVeri bilimini korumanın kozmik bir gizemi çözmek için gerekli olduğu 2912 yılında hoş geldiniz. Dört ışık yılı öteden bir iletilen ve işler iyi görünmüyor.\nUzay Gemisi Titanic, bir ay önce fırlatılan bir yıldızlararası yolcu yolculuğuydu. Gemide yaklaşık 13.000 yolcuyla, geminin ilk yolculuğuna çıktı ve göçmenleri güneş sistemimizden yakın yıldızların dönüşünde dönen üç yeni yaşanabilir dış gezegene taşındı.\nİlk varış noktası olan yakıcı 55 Cancri E’ye doğru yolda Alpha Centauri’yi dönerken, dikkatsiz Uzay Gemisi Titanik, bir toz bulutunun içinde saklı bir uzay-zaman anomalisiyle çarpıştı. Ne yazık ki, 1000 yıl önceki ismin babasıyla aynı kaderi paylaştı. Gemi sağlam kalsa da, yolcuların neredeyse ortasında alternatif bir boyuta taşındı.\ntrain.csv Eğitim verisi olarak kullanılacak yolcuların yaklaşık üç ikisine (~8700) ait kişisel kayıtlar. PassengerId Her yolcu için benzersiz bir kimlik. Kimliği, yolcunun seyahat ettiği ve gruptaki numarasını gggg_pp gösteren bir form grubu alır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil. HomePlanet Yolcunun ekonomik gezegeni, genellikle daimi ikamet ettiği gezegen. CryoSleep Yolcunun duraklama süresinin sona erme hareketini almayı seçmeyi seçmediğini belirtir. Kriyo uykudaki yolcu kabinlerine kapatılır. Kabin yolcusunun kabin numarası. Şeklindedirdeck/num/side, Liman veya Sancak için sideolabilir.PS Destinasyon-Yolcunun ineceği gezegen. Yaş Yolcunun yaşı. VIP Yolcunun seyahati sırasında özel VIP hizmeti için ödemelerin yapılmadığı. RoomService , FoodCourt , Alışveriş Merkezi , Spa , VRDeck Uzay Gemisi Titanic’in birçok lüks konaklama için yolcunun ödediği tutar. İsim Yolcunun adı ve soyadı. Taşınan yolcunun başka bir boyuta taşınıp taşınmadığı. Bu hedefi tahmin etmeye çalışmak sütununda yer alır.\nlibrary(readr) train &lt;- read_csv(“data/train.csv”) test &lt;- read_csv(“data/test.csv”)\nlibrary(explore)\ndescribe_all(train)\ndescribe_all(test)\n\n\nVeri Önişleme\nYolcu kimliği Her yolcu için benzersiz bir kimlik. Her kimlik, gggg_pp biçimini alır; burada gggg, yolcunun seyahat ettiği grubu belirtir ve pp, gruptaki numaradır. Bir gruptaki kişiler genellikle aile üyeleridir, ancak her zaman değil.\nOnun yolcusu için benzersiz bir kimlik. Onun kimlik gggg_pp’sini alır; burada gggg, yolcunun birlikte seyahat ettiği grubu belirtir ve pp, grubun içindeki numaradır. Bir gruptaki insanların çoğu aile üyeleridir, ancak her zaman değil.\nhead(train$PassengerId)\nlibrary(stringr)\ntrain[c(“ailenum”, “ailesira”)] &lt;- str_split_fixed(train$PassengerId, “_“, 2)\ntest[c(“ailenum”, “ailesira”)] &lt;- str_split_fixed(test$PassengerId, “_“, 2)\nhead(train[, c(“PassengerId”,“ailenum”, “ailesira”)])\nlibrary(tidyverse)\ntrain &lt;- train %&gt;% group_by(ailenum) %&gt;% mutate(tek_basina = ifelse(n() == 1, 1, 0)) %&gt;% ungroup()\ntest &lt;- test %&gt;% group_by(ailenum) %&gt;% mutate(tek_basina = ifelse(n() == 1, 1, 0)) %&gt;% ungroup()\ntrain &lt;- train %&gt;% select(-ailenum,-ailesira) test &lt;- test %&gt;% select(-ailenum,-ailesira)\ntrain\\(tek_basina &lt;- as.factor(train\\)tek_basina) test\\(tek_basina &lt;- as.factor(test\\)tek_basina)\nsummary(train$tek_basina)\n\n\nKabin\nYolcunun kaldığı kabin numarası. deck/num/side formunu alır, burada side, P (Sunboard) veya S (Pan) olabilir.\nYolcunun kaldığı kabin numarası. Güverte/numara/yan birleştirilir; burada taraf, İskele için P veya Sancak için S olabilir.\nhead(train$Cabin)\ntrain[c(‘deck’, ‘num’, ‘side’)] &lt;- str_split_fixed(train$Cabin, ‘/’, 3)\ntest[c(‘deck’, ‘num’, ‘side’)] &lt;- str_split_fixed(test$Cabin, ‘/’, 3)\nhead(train[, c(“Cabin”,“deck”, “num”, “side”)])\ntrain[train == “”] &lt;- NA test[test == “”] &lt;- NA\ntrain &lt;- train %&gt;% select(-Cabin) test &lt;- test %&gt;% select(-Cabin)\nsummary(as.factor(train$deck))\ntrain\\(deck[train\\)deck %in% c(“T”, “NA”)] &lt;- “Other” test\\(deck[test\\)deck %in% c(“T”, “NA”)] &lt;- “Other” train\\(deck[is.na(train\\)deck)] &lt;- “Other” test\\(deck[is.na(test\\)deck)] &lt;- “Other”\nsummary(as.factor(train$deck))\ndescribe_all(train)\ntrain &lt;- train %&gt;% select(-Name, -num) test &lt;- test %&gt;% select(-Name, -num)\ntrain &lt;- train %&gt;% mutate_if(is.logical, as.factor) %&gt;% # Convert logical columns to factors mutate(across(where(is.character) & !all_of(“PassengerId”), as.factor)) # Convert character columns to factors\ntest &lt;- test %&gt;% mutate_if(is.logical, as.factor) %&gt;% # Convert logical columns to factors mutate(across(where(is.character) & !all_of(“PassengerId”), as.factor)) # Convert character columns to factors\nsummary(train)\nsummary(test)\n\n\nYaş\nlibrary(ggplot2)\n\n\nCreate a ggplot object for train dataset\np_train &lt;- ggplot(train, aes(x = Age)) + geom_histogram(fill = “blue”, alpha = 0.5, bins = 20) + labs(title = “Train Dataset”, x = “Age”, y = “Count”) + theme_minimal()\n\n\nCreate a ggplot object for test dataset\np_test &lt;- ggplot(test, aes(x = Age)) + geom_histogram(fill = “red”, alpha = 0.5, bins = 20) + labs(title = “Test Dataset”, x = “Age”, y = “Count”) + theme_minimal()\nlibrary(gridExtra)\ngrid.arrange(p_train, p_test, ncol = 2)\n# Create the histogram for both datasets in one plot without combining ggplot() + geom_histogram(data = train, aes(x = Age, fill = “Train”), position = “identity”, alpha = 0.5, bins = 20) + geom_histogram(data = test, aes(x = Age, fill = “Test”), position = “identity”, alpha = 0.5, bins = 20) + labs(title = “Histogram of Age Variable”, x = “Age”, y = “Count”) + theme_minimal() + scale_fill_manual(name = “Dataset”, values = c(“Train” = “blue”, “Test” = “red”))\narning: Removed 179 rows containing non-finite outside the scale range (stat_bin()). Warning: Removed 91 rows containing non-finite outside the scale range (stat_bin()).\n\n\nAna Gezegen\nsummary(train$HomePlanet)\nsummary(test$HomePlanet)\n\n\nCreate a ggplot object for train dataset\np_hptrain &lt;- ggplot(train, aes(x = HomePlanet)) + geom_bar(fill = “blue”, alpha = 0.5) + labs(title = “Train Dataset”, x = “Home Planet”, y = “Count”) + theme_minimal()\n\n\nCreate a ggplot object for test dataset\np_hptest &lt;- ggplot(test, aes(x = HomePlanet)) + geom_bar(fill = “red”, alpha = 0.5) + labs(title = “Test Dataset”, x = “Home Planet”, y = “Count”) + theme_minimal()\ngrid.arrange(p_hptrain, p_hptest, ncol = 2)\n# Create the histogram for both datasets in one plot without combining ggplot() + geom_bar(data = train, aes(x = HomePlanet, fill = “Train”), position = “identity”, alpha = 0.5) + geom_bar(data = test, aes(x = HomePlanet, fill = “Test”), position = “identity”, alpha = 0.5) + labs(title = “Histogram of Age Variable”, x = “Home Planet”, y = “Count”) + theme_minimal() + scale_fill_manual(name = “Dataset”, values = c(“Train” = “blue”, “Test” = “red”))\n\n\nTaşındı\nggplot(train, aes(x = Transported)) + geom_bar(fill = “blue”, alpha = 0.5) + labs(title = “Train Dataset”, x = “Transported”, y = “Count”) + theme_minimal()\nlibrary(tidymodels)\nst_recipe &lt;- recipe(Transported ~ ., data = train) %&gt;% update_role(PassengerId, new_role = “ID”) %&gt;% step_impute_knn(all_predictors()) %&gt;% step_normalize(all_numeric_predictors()) %&gt;% step_dummy(all_nominal_predictors(), one_hot = TRUE)\n# Specify the logistic regression model logistic_model &lt;- logistic_reg() %&gt;% set_engine(“glm”)\n# Create a workflow st_workflow &lt;- workflow() %&gt;% add_recipe(st_recipe) %&gt;% add_model(logistic_model)\n# Fit the model directly with the workflow trained_model &lt;- st_workflow %&gt;% fit(data = train)\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n# Prepare the test data and make predictions in one step predictions &lt;- trained_model %&gt;% predict(new_data = test) %&gt;% # Directly pass the test data bind_cols(test) # Bind the original test data for reference\n# Step 3: Extract the id from the test data and the predicted prices submission &lt;- predictions %&gt;% select(PassengerId = PassengerId, .pred_class = .pred_class) %&gt;% # Adjust this if the id is stored differently rename(Transported = .pred_class) # Rename predicted column if needed\nsubmission &lt;- as.data.frame(submission)\nsubmission\\(Transported &lt;- str_to_title(submission\\)Transported)\nwrite.csv(submission, “submission_logistic.csv”, row.names = FALSE, quote = FALSE)\nrf_model &lt;- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %&gt;% set_engine(“ranger”) %&gt;% set_mode(“classification”)\nset.seed(123) rf_wf &lt;- workflow() %&gt;% add_model(rf_model) %&gt;% add_recipe(st_recipe) rf_wf\n══ Workflow ════════════════════════════════════════════════════════════════════ Preprocessor: Recipe Model: rand_forest()\n── Preprocessor ──────────────────────────────────────────────────────────────── 3 Recipe Steps\n• step_impute_knn() • step_normalize() • step_dummy()\n── Model ─────────────────────────────────────────────────────────────────────── Random Forest Model Specification (classification)\nMain Arguments: mtry = tune() trees = 1000 min_n = tune()\nComputational engine: ranger\nset.seed(123) spaceship_val &lt;- validation_split(train, strata = Transported, prop = 0.80)\nWarning: validation_split() was deprecated in rsample 1.2.0. ℹ Please use initial_validation_split() instead.\nrf_results &lt;- rf_wf %&gt;% tune_grid(resamples = spaceship_val, grid = 25, control = control_grid(save_pred = TRUE), metrics = metric_set(accuracy) )\ni Creating pre-processing data to finalize unknown parameter: mtry\nrf_results %&gt;% collect_predictions()\nrf_results %&gt;% collect_metrics()\nparam_final &lt;- rf_results %&gt;% select_best(metric = “accuracy”) param_final\nlast_rf_model &lt;- rand_forest(mtry = param_final\\(mtry, min_n = param_final\\)min_n, trees = 1000) %&gt;% set_engine(“ranger”) %&gt;% set_mode(“classification”)\nlast_rf_wf &lt;- rf_wf %&gt;% update_model(last_rf_model)\nlast_rf_fit &lt;- last_rf_wf %&gt;% fit(train)\ntest_pred &lt;- predict(last_rf_fit, test)\noptions(warn = getOption(“warn”)) test_pred_new &lt;- test_pred %&gt;% mutate(.pred_class = str_to_title(.pred_class))\nsubmission\\(Transported &lt;- test_pred_new\\).pred_class\nwrite_csv(submission, “submissionrf.csv”)\nbt_cls_spec &lt;- boost_tree(trees = 15) %&gt;% # This model can be used for classification or regression, so set mode set_mode(“classification”) %&gt;% set_engine(“xgboost”)\n# Create a workflow\nst_workflow &lt;- workflow() %&gt;% add_recipe(st_recipe) %&gt;% add_model(bt_cls_spec)\n# Fit the model directly with the workflow trained_model &lt;- st_workflow %&gt;% fit(data = train)\n# Prepare the test data and make predictions in one step predictions &lt;- trained_model %&gt;% predict(new_data = test) %&gt;% # Directly pass the test data bind_cols(test) # Bind the original test data for reference\n# Step 3: Extract the id from the test data and the predicted prices submission &lt;- predictions %&gt;% select(PassengerId = PassengerId, .pred_class = .pred_class) %&gt;% # Adjust this if the id is stored differently rename(Transported = .pred_class) # Rename predicted column if needed\nsubmission &lt;- as.data.frame(submission)\nsubmission\\(Transported &lt;- str_to_title(submission\\)Transported)\nwrite.csv(submission, “submission_xg.csv”, row.names = FALSE, quote = FALSE)\nsvm_cls_spec &lt;- svm_poly(cost = 1) %&gt;% # This model can be used for classification or regression, so set mode set_mode(“classification”) %&gt;% set_engine(“kernlab”)\n# Create a workflow\nst_workflow &lt;- workflow() %&gt;% add_recipe(st_recipe) %&gt;% add_model(svm_cls_spec)\n# Fit the model directly with the workflow trained_model &lt;- st_workflow %&gt;% fit(data = train)\nSetting default kernel parameters\n# Prepare the test data and make predictions in one step predictions &lt;- trained_model %&gt;% predict(new_data = test) %&gt;% # Directly pass the test data bind_cols(test) # Bind the original test data for reference\n# Step 3: Extract the id from the test data and the predicted prices submission &lt;- predictions %&gt;% select(PassengerId = PassengerId, .pred_class = .pred_class) %&gt;% # Adjust this if the id is stored differently rename(Transported = .pred_class) # Rename predicted column if needed\nsubmission &lt;- as.data.frame(submission)\nsubmission\\(Transported &lt;- str_to_title(submission\\)Transported)\nwrite.csv(submission, “submission_polysvm.csv”, row.names = FALSE, quote = FALSE)\nsvm_cls_spec &lt;- svm_rbf(cost = 1) %&gt;% # This model can be used for classification or regression, so set mode set_mode(“classification”) %&gt;% set_engine(“kernlab”)\n# Create a workflow st_workflow &lt;- workflow() %&gt;% add_recipe(st_recipe) %&gt;% add_model(svm_cls_spec)\n# Fit the model directly with the workflow trained_model &lt;- st_workflow %&gt;% fit(data = train)\n# Prepare the test data and make predictions in one step predictions &lt;- trained_model %&gt;% predict(new_data = test) %&gt;% # Directly pass the test data bind_cols(test) # Bind the original test data for reference\n# Step 3: Extract the id from the test data and the predicted prices submission &lt;- predictions %&gt;% select(PassengerId = PassengerId, .pred_class = .pred_class) %&gt;% # Adjust this if the id is stored differently rename(Transported = .pred_class) # Rename predicted column if needed\nsubmission &lt;- as.data.frame(submission)\nsubmission\\(Transported &lt;- str_to_title(submission\\)Transported)\nwrite.csv(submission, “submission_rbfsvm.csv”, row.names = FALSE, quote = FALSE)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Hakkında",
    "section": "",
    "text": "Merhaba! Ben [İbrahim], veri bilimi, istatistik ve R programlama dili ile ilgileniyorum. Bu siteyi, projelerimi, analizlerimi ve öğrendiklerimi paylaşmak için oluşturdum.\n\n\n\nEğitim: [Karabük] Üniversitesi, [iktisat]\nDeneyim: Veri analizi, görselleştirme, makine öğrenmesi projeleri ve çeşitli analiz çalışmaları\n\n\n\n\nBu sitede şunları bulabilirsiniz: - Veri Analizleri: Farklı veri setleriyle yaptığım analizleri ve elde ettiğim sonuçları paylaşıyorum. - Proje Çalışmaları: Veri bilimi ve makine öğrenmesi üzerine yaptığım projelere buradan ulaşabilirsiniz. - Blog Yazıları: Veri bilimi, R dili ve Quarto hakkında yazılar paylaşıyorum."
  },
  {
    "objectID": "about.html#eğitim-ve-deneyim",
    "href": "about.html#eğitim-ve-deneyim",
    "title": "Hakkında",
    "section": "",
    "text": "Eğitim: [Karabük] Üniversitesi, [iktisat]\nDeneyim: Veri analizi, görselleştirme, makine öğrenmesi projeleri ve çeşitli analiz çalışmaları"
  },
  {
    "objectID": "about.html#bu-site-hakkında",
    "href": "about.html#bu-site-hakkında",
    "title": "Hakkında",
    "section": "",
    "text": "Bu sitede şunları bulabilirsiniz: - Veri Analizleri: Farklı veri setleriyle yaptığım analizleri ve elde ettiğim sonuçları paylaşıyorum. - Proje Çalışmaları: Veri bilimi ve makine öğrenmesi üzerine yaptığım projelere buradan ulaşabilirsiniz. - Blog Yazıları: Veri bilimi, R dili ve Quarto hakkında yazılar paylaşıyorum."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ana Sayfa",
    "section": "",
    "text": "Merhaba! Bu web sitesi, Uygulamalı Ekonometri dersi için hazırladığım kişisel bir projedir.\nBu sitede, ders kapsamında gerçekleştirdiğim ödevler, projeler ve analizler yer alacak. Ayrıca, econometrics üzerine çeşitli konular hakkında düşüncelerimi ve öğrenim sürecimde karşılaştığım önemli noktaları burada paylaşacağım.\nLütfen üst menüdeki bölümler aracılığıyla siteyi keşfedin. Ödevlerim ve Projelerim sekmesinde detaylı analizlere ulaşabilirsiniz. Ayrıca, hakkımda daha fazla bilgi edinmek için Hakkımda sayfasını ziyaret edebilirsiniz.\n\n\n\nSite içeriği: Uygulamalı ekonometri dersi ödevleri, Verilerle yapılan analizler, R kodları ve sonuçlar, Kişisel düşünceler ve öğrenim notları"
  },
  {
    "objectID": "index.html#projelerim",
    "href": "index.html#projelerim",
    "title": "Ana Sayfa",
    "section": "",
    "text": "Site içeriği: Uygulamalı ekonometri dersi ödevleri, Verilerle yapılan analizler, R kodları ve sonuçlar, Kişisel düşünceler ve öğrenim notları"
  }
]